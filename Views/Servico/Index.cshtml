@model IEnumerable<Epic_Arts_Entertainment.Models.ServicoVM>
@{
    Layout = "~/Views/Shared/_Layout_Gerenciamento.cshtml";
}

<body>
    <!-- Overlay e Loader -->
    <div id="overlay" style="display: none;"></div>
    <div id="loader" style="display: none;">
        <i class="fa fa-spinner fa-spin"></i> Carregando...
    </div>

    <section class="maneger-page-section">
        <div class="container page-maneger servico-height">
            <div class="logo-container text-center mt-3 mb-3">
                <a href="/Home/Index"><img src="~/images/Logo/Logo.png" alt="About-Image" style="width: 100px; height: 100px; "></a>
            </div>
            <div class="add-user-button">
                <br>
                <h1 class="section-title cliente-title-maneger">Gerenciamento de Serviço</h1>
                <br>
            </div>

            <div class="container">
                <div class="row">
                    <div class="col-md-6">
                        <div class="input-group mb-4">
                            <input id="filtro" type="text" class="form-control" placeholder="Pesquisar Produtos..." aria-label="Filtrar" aria-describedby="basic-addon2">
                        </div>
                    </div>
                    <div class="col-md-6 text-md-end">
                        <button class="btn btn-danger btn-lg" onclick="" data-bs-toggle="modal" data-bs-target="#InserirServico">
                            <i class="fa fa-plus"></i> Adicionar Serviço
                        </button>
                    </div>
                </div>
            </div>

            <div class="table-container ">
                <div class="table-responsive">
                    <table id="TbClientes" class="table">
                        <colgroup>
                            <col class="tc-nome">
                        </colgroup>
                        <thead>
                            <tr>
                                <th style="color: #db22ac; border: 1px solid #db22ac; padding: 8px; width: 50px; position: sticky; top: 0; background-color: #000000;">#</th>
                                <th style="color: #db22ac; border: 1px solid #db22ac; padding: 8px; width: 900px; position: sticky; top: 0; background-color: #000000;">Nome do Serviço</th>
                                <th style="color: #db22ac; border: 1px solid #db22ac; padding: 8px; width: 200px; position: sticky; top: 0; background-color: #000000;">Valor do Serviço</th>
                                <th class="editar" style="color: #db22ac; border: 1px solid #db22ac; padding: 8px; width: 50px; position: sticky; top: 0; background-color: #000000;">Editar</th>
                                <th class="excluir" style="color: #db22ac; border: 1px solid #db22ac; padding: 8px; width: 50px; position: sticky; top: 0; background-color: #000000;">Excluir</th>
                            </tr>
                        </thead>
                    </table>
                    <!-- Corpo da tabela rolável -->
                    <div style="max-height: 300px; overflow-y: auto; overflow-x: hidden;">
                        <table id="TbServicosBody" class="table-responsive" style="width: 100%; border-collapse: collapse; table-layout: fixed;">
                            <tbody>
                                @if (Model != null && Model.Any())

                                {
                                    @foreach (var servico in Model)

                                    {
                                        <tr>
                                            <td style="color: #db22ac; border: 1px solid #db22ac; padding: 8px; width: 50px">@servico.IdServico</td>
                                            <td style="color: #db22ac; border: 1px solid #db22ac; padding: 8px; width: 840px">@servico.TipoServico</td>
                                            <td style="color: #db22ac; border: 1px solid #db22ac; padding: 8px; width: 200px">@servico.Valor.ToString("C")</td> <!-- Formato de moeda -->

                                            <td class="text-center" style="border: 1px solid #db22ac; width: 50px;">
                                                <button class="btn btn-default" onclick="definirEdt('@servico.IdServico', '@servico.TipoServico', '@servico.Valor')" data-bs-toggle="modal" data-bs-target="#AtualizarServico" style="color: #000000;">
                                                    <i class="fa fa-edit"></i>
                                                </button>
                                            </td>
                                            <td class="text-center" style="border: 1px solid #db22ac; width: 50px;">
                                                <button class="btn btn-default" onclick="definirExc('@servico.IdServico', '@servico.TipoServico', '@servico.Valor')" data-bs-toggle="modal" data-bs-target="#ExcluirServico" style="color: #000000;">
                                                    <i class="fa fa-trash"></i>
                                                </button>
                                            </td>
                                        </tr>
                                    }
                                }

                                else

                                {
                                    <tr>
                                        <td colspan="5" style="text-align: center; color: #EAE7DC; padding: 8px;">Nenhum serviço encontrado.</td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
            <br>
            <!-- Contador de Registros Centralizado com Fonte Maior -->
            <div style="text-align: center; color: #db22ac; margin-top: 10px;">
                <strong style="font-size: 18px">Total de Serviços: <span id="registroCount">0</span></strong>
            </div>
        </div>


        <div class="modal fade" id="ExcluirServico" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h2 class="modal-title" id="exampleModalLabel">Excluir Serviço</h2>
                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                    </div>
                    <div class="modal-body">
                        <form>
                            <div class="mb-3">
                                <label for="IdServico">Id do Serviço</label>
                                <input style="background-color: #000000; color: #db22ac" type="number" id="ExcId" class="form-control" readonly>
                            </div>
                        </form>
                        <div class="modal-footer">
                            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Fechar</button>
                            <button type="button" class="btn btn-danger" onclick="ExcluirServico()">Excluir</button>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Modal para Inserir Serviço -->
        <div class="modal fade" id="InserirServico" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
            <div class="modal-dialog modal-dialog-scrollable" style="max-height: 80vh;">
                <div class="modal-content">
                    <div class="modal-header">
                        <h2 class="modal-title" id="exampleModalLabel">Adicionar Serviço</h2>
                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                    </div>
                    <div class="modal-body">
                        <form>
                            <div class="mb-3 row">
                                <div class="col-md-6">
                                    @Html.DropDownList("TipoServico",
                                             new SelectList(ViewBag.Servicos, "Value", "Text", null),
                                             "Escolha o serviço",
                                             new { @class = "form-control", @style = "width:230px; background-color: #EAE7DC; color: #333;", required = "required" })
                                </div>
                                <div class="col-md-6">
                                    <label style="color:red">*</label>
                                </div>
                            </div>

                            <div class="mb-3">
                                <label for="v_serv">Valor do Serviço:</label>
                                <input id="Valor" type="number" class="form-control" style="width: 300px;" placeholder="R$ 1000,00" required>
                            </div>
                        </form>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Fechar</button>
                        <button type="button" class="btn btn-primary" onclick="InserirServico()">Adicionar</button>
                    </div>
                </div>
            </div>
        </div>

        <div class="modal fade" id="AtualizarServico" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h2 class="modal-title" id="exampleModalLabel">Editar Serviço</h2>
                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                    </div>
                    <div class="modal-body">
                        <form>
                            <div class="mb-3 row">
                                <div class="col-md-6">
                                    @Html.DropDownList("EdtTipoServico",
                                             new SelectList(ViewBag.Servicos, "Value", "Text", null),
                                             "Escolha o serviço",
                                             new { @class = "form-control", @style = "width:230px; background-color: #EAE7DC; color: #333;", required = "required" })
                                </div>
                                <div class="col-md-6">
                                    <label style="color:red">*</label>
                                </div>
                            </div>
                            <div class="mb-3">
                                <label for="EdtValor">Valor do Serviço</label>
                                <input type="text" id="EdtValor" class="form-control" placeholder="R$ 1000,00">
                            </div>
                            <input type="hidden" id="EdtId" value="">
                        </form>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Fechar</button>
                        <button type="button" onclick="AtualizarServico()" class="btn btn-primary">Atualizar</button>
                    </div>
                </div>
            </div>
        </div>
>

    </section>

    

    <script src="https://code.jquery.com/jquery-3.6.4.min.js"></script>

    <script src="~/lib/swiper/swiper-bundle.min.js"></script>

    <script src="~/lib/jquery/dist/jquery.min.js"></script>

    <script src="~/lib/bootstrap/dist/js/bootstrap.bundle.min.js"></script>

    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script> <!-- Adiciona o SweetAlert2 -->

    <script>
        document.addEventListener("DOMContentLoaded", function () {
            // Função para remover o asterisco
            function removerAsterisco(campo) {
                var label = campo.closest('.row').querySelector('label');

                // Verifica se o campo foi preenchido
                if (campo.value.trim() !== "") {
                    label.style.display = 'none'; // Remove o asterisco
                } else {
                    label.style.display = 'inline'; // Exibe o asterisco novamente se o campo estiver vazio
                }
            }

            // Função para aplicar o evento de input em todos os campos
            function adicionarEventos() {
                // Campos de texto
                var campos = ['#Nome', '#Senha', ' ', '#Telefone', '#TipoUsuario'];

                campos.forEach(function (seletor) {
                    var campo = document.querySelector(seletor);
                    if (campo) {
                        campo.addEventListener('input', function () {
                            removerAsterisco(campo);
                        });
                    }
                });
            }

            // Inicializa os eventos
            adicionarEventos();
        });

        document.addEventListener("DOMContentLoaded", function () {
            // Função para verificar se o campo foi preenchido e esconder o asterisco
            function verificarPreenchimento(campo, label) {
                if (campo.value.trim() !== "" || (campo.tagName === "SELECT" && campo.selectedIndex !== 0)) {
                    label.style.display = 'none'; // Esconde o asterisco
                } else {
                    label.style.display = 'inline'; // Exibe o asterisco se o campo estiver vazio
                }
            }

            // Função para adicionar os eventos de input e change nos campos
            function adicionarEventos() {
                // Campos a serem monitorados
                const campos = [
                    { id: '#EdtNome', type: 'input' },
                    { id: '#EdtSenha', type: 'input' },
                    { id: '#EdtEmail', type: 'input' },
                    { id: '#EdtTel', type: 'input' },
                    { id: '#EdtTipoUsuario', type: 'select' }
                ];

                campos.forEach(function (campoInfo) {
                    const campo = document.querySelector(campoInfo.id);
                    const label = campo.closest('.row').querySelector('label'); // Encontra o label associado ao campo

                    if (campoInfo.type === 'input') {
                        // Para campos de input, adicionar evento de 'input'
                        campo.addEventListener('input', function () {
                            verificarPreenchimento(campo, label);
                        });
                    } else if (campoInfo.type === 'select') {
                        // Para o select, adicionar evento de 'change'
                        campo.addEventListener('change', function () {
                            verificarPreenchimento(campo, label);
                        });
                    }

                    // Chama a função para inicializar o estado do campo ao carregar a página
                    verificarPreenchimento(campo, label);
                });
            }

            // Inicializa os eventos
            adicionarEventos();

            // Função que preenche os campos ao editar o usuário
            window.definirEdt = function (id, Nome, Email, Senha, TipoUsuario, Telefone) {
                $('#EdtId').val(id);
                $('#EdtNome').val(Nome);
                $('#EdtSenha').val(Senha);
                $('#EdtEmail').val(Email);
                $('#EdtTel').val(Telefone);

                // Preenche o campo de senha, se necessário
                var senhaValue = "";
                if (Senha) {
                    $('#EdtSenha').val(Senha);
                    senhaValue = Senha;
                }

                // Atualiza o tipo de usuário no dropdown
                if ($('#EdtTipoUsuario').length > 0) {
                    $('#EdtTipoUsuario option').filter(function () {
                        return $(this).val() === TipoUsuario;
                    }).prop('selected', true);
                    $('#EdtTipoUsuario').trigger('chosen:updated');
                } else {
                    console.error("DropDownList não encontrado.");
                }

                // Verifica o preenchimento dos campos e esconde os asteriscos
                const campos = [
                    { id: '#EdtNome', type: 'input' },
                    { id: '#EdtSenha', type: 'input' },
                    { id: '#EdtEmail', type: 'input' },
                    { id: '#EdtTel', type: 'input' },
                    { id: '#EdtTipoUsuario', type: 'select' }
                ];

                // Chama a função de verificação para cada campo ao preencher os dados
                campos.forEach(function (campoInfo) {
                    const campo = document.querySelector(campoInfo.id);
                    const label = campo.closest('.row').querySelector('label');
                    verificarPreenchimento(campo, label);
                });
            }
        });
       
        $(document).ready(function () {
            // Função para atualizar o contador de registros visíveis
            function atualizarContador() {
                var visibleRows = $('#TbServicosBody tbody tr:visible').length; // Conta as linhas visíveis
                $('#registroCount').text(visibleRows); // Atualiza o contador
            }

            // Quando o usuário digitar no campo de filtro
            $('#filtro').on('keyup', function () {
                var value = $(this).val().toLowerCase(); // Pega o valor do campo de filtro e converte para minúsculas

                // Filtra as linhas do corpo da tabela
                $('#TbServicosBody tbody tr').each(function () {
                    // Verifica se qualquer célula na linha contém o valor digitado no filtro
                    var rowText = $(this).text().toLowerCase();
                    // Exibe ou oculta a linha, dependendo de conter o valor
                    $(this).toggle(rowText.indexOf(value) > -1);
                });

                // Atualiza o contador após filtrar as linhas
                atualizarContador();
            });

            // Inicializa o contador de registros ao carregar a página
            atualizarContador();
        });

        function definirEdt(id, tiposervico, valor) {
            console.log("tiposervico recebido:", tiposervico);  // Verifique o valor que está sendo passado para a função

            $('#EdtId').val(id);
            $('#EdtValor').val(valor);

            if ($('#EdtTipoServico').length > 0) {
                console.log("Procurando valor no dropdown EdtTipoServico:", tiposervico);

                // Percorrer todas as opções para encontrar o valor correto
                var optionFound = false;

                $('#EdtTipoServico option').each(function () {
                    // Comparar o texto das opções com o texto recebido
                    if ($(this).text() === tiposervico) {
                        // Marca a opção como selecionada
                        $(this).prop('selected', true);
                        optionFound = true;
                    }
                });

                if (optionFound) {
                    // Atualiza o chosen, se necessário
                    $('#EdtTipoServico').trigger('chosen:updated');

                    // Imprime no console o valor da opção selecionada
                    var selectedValue = $('#EdtTipoServico').val();
                    console.log("Valor selecionado no dropdown EdtTipoServico:", selectedValue);
                } else {
                    console.log("Opção não encontrada no dropdown.");
                }
            } else {
                console.error("DropDownList 'EdtTipoServico' não encontrado.");
            }
        }

        function definirExc(id, nome, valor) {
            console.log(id, nome, valor)
            $('#ExcId').val(id);
            $('#ExcServico').val(nome);
            $('#ExcValor').val(valor);
        }
        
        function InserirServico() {

             var tipoServico = $('#TipoServico option:selected').text();
             var Valor = $('#Valor').val();


             if (tipoServico === "" || tipoServico === "Escolha o serviço") {
                alert("Por favor, selecione um Serviço Valido.");
                 return;
             }
             if (Valor.trim() === "") {
                 alert("Por favor, insira um Valor Valido.");
                 return;
             }

             // Show the overlay and loader
             $("#overlay").show();  // Exibir o overlay escuro
             $("#loader").show();   // Exibir o loader


             // Objeto com os dados para enviar via AJAX
             var dados = {
                 tipoServico: tipoServico,
                 Valor: Valor
             };

             console.log(dados); // Verifica os dados antes de enviar

             // Requisição AJAX
             $.ajax({
                 url: '@Url.Action("InserirServico", "Servico")', // Substitua "NomeDoController" pelo nome da sua controller
                 type: 'POST',
                 dataType: 'json',
                 data: dados,
                 success: function (resultado) {
                    // Hide the overlay and loader after the resultado
                    $("#overlay").hide();
                    $("#loader").hide();

                    if (resultado.success) {
                        Swal.fire({
                            position: "top-end",
                            icon: 'success',
                            title: 'Sucesso',
                            text: 'Servico cadastrado com sucesso!',
                            confirmButtonText: 'OK',
                            width: '400px',  // Defina a largura desejada aqui
                            padding: '20px', // Ajuste o preenchimento interno do alerta
                            customClass: {
                                popup: 'custom-popup'  // Adiciona uma classe customizada (opcional)
                            }
                        }).then(function () {
                            // Fecha o modal
                            $('#InserirServico').modal('hide');
                            // Recarrega a página
                            location.reload(); // Recarrega a página atual
                        });
                    } else {
                        Swal.fire({
                            position: "top-end",
                            icon: 'error',
                            title: 'Erro',
                            text: resultado.message,
                            confirmButtonText: 'OK',
                            width: '400px',  // Defina a largura desejada aqui
                            padding: '20px', // Ajuste o preenchimento interno do alerta
                            customClass: {
                                popup: 'custom-popup'  // Adiciona uma classe customizada (opcional)
                            }
                        });
                    }
                 },
                 error: function () {
                     Swal.fire({
                            position: "top-end",
                            icon: 'error',
                            title: 'Erro',
                            text: resultado.message,
                            confirmButtonText: 'OK',
                            width: '400px',  // Defina a largura desejada aqui
                            padding: '20px', // Ajuste o preenchimento interno do alerta
                            customClass: {
                                popup: 'custom-popup'  // Adiciona uma classe customizada (opcional)
                            }
                        });
                 }
             });
         }

        function AtualizarServico() {
            // Obter valores dos campos
            var id = $('#EdtId').val();
            var tipoServico = $('#EdtTipoServico option:selected').text();  // Valor do tipo de serviço selecionado
            var valor = $('#EdtValor').val();  // Valor inserido

            // Validação dos campos
            if (!id || id === "") {
                alert("O ID do serviço é obrigatório.");
                return;  // Para a execução da função se o ID não estiver preenchido
            }

            if (!tipoServico || tipoServico === "Escolha o serviço") {
                alert("Por favor, selecione um tipo de serviço.");
                return;  // Para a execução da função se o tipo de serviço não for selecionado
            }

            if (!valor || valor.trim() === "") {
                alert("Por favor, insira um valor para o serviço.");
                return;  // Para a execução da função se o valor estiver vazio
            }

            // Show the overlay and loader
             $("#overlay").show();  // Exibir o overlay escuro
             $("#loader").show();   // Exibir o loader

            // Fazer a requisição AJAX para atualizar o serviço
            $.ajax({
                url: '/Servico/AtualizarServico',  // Substitua pelo nome real do seu controller
                type: 'POST',
                data: {
                    id: id,
                    TipoServico: tipoServico,
                    Valor: valor
                },
                success: function (resultado) {
                    // Hide the overlay and loader after the resultado
                    $("#overlay").hide();
                    $("#loader").hide();

                    if (resultado.success) {
                        Swal.fire({
                            position: "top-end",
                            icon: 'success',
                            title: 'Sucesso',
                            text: 'Servico alterado com sucesso!',
                            confirmButtonText: 'OK',
                            width: '400px',  // Defina a largura desejada aqui
                            padding: '20px', // Ajuste o preenchimento interno do alerta
                            customClass: {
                                popup: 'custom-popup'  // Adiciona uma classe customizada (opcional)
                            }
                        }).then(function () {
                            // Fecha o modal
                            $('#AtualizarServico').modal('hide');
                            // Recarrega a página
                            location.reload(); // Recarrega a página atual
                        });
                    } else {
                        Swal.fire({
                            position: "top-end",
                            icon: 'error',
                            title: 'Erro',
                            text: resultado.message,
                            confirmButtonText: 'OK',
                            width: '400px',  // Defina a largura desejada aqui
                            padding: '20px', // Ajuste o preenchimento interno do alerta
                            customClass: {
                                popup: 'custom-popup'  // Adiciona uma classe customizada (opcional)
                            }
                        });
                    }
                },
                error: function (xhr, status, error) {
                    Swal.fire({
                            position: "top-end",
                            icon: 'error',
                            title: 'Erro',
                            text: resultado.message,
                            confirmButtonText: 'OK',
                            width: '400px',  // Defina a largura desejada aqui
                            padding: '20px', // Ajuste o preenchimento interno do alerta
                            customClass: {
                                popup: 'custom-popup'  // Adiciona uma classe customizada (opcional)
                            }
                        });
                }
            });
        }

        function ExcluirServico() {
            var idServico = $('#ExcId').val();  // Pega o ID do serviço

            // Show the overlay and loader
            $("#overlay").show();  // Exibir o overlay escuro
            $("#loader").show();   // Exibir o loader

            // Dados a enviar para o servidor (ID do serviço)
            var dados = {
                id: idServico // Usando "id" conforme esperado pelo backend
            };

            // Requisição AJAX para excluir o serviço
            $.ajax({
                url: '/Servico/ExcluirServico', // URL do controlador que vai processar a exclusão
                type: "POST",
                dataType: "json",
                data: dados,
                success: function (resultado) {
                    // Hide the overlay and loader after the resultado
                    $("#overlay").hide();
                    $("#loader").hide();

                    if (resultado.success) {
                        Swal.fire({
                            position: "top-end",
                            icon: 'success',
                            title: 'Sucesso',
                            text: 'Serviço excluido com sucesso!',
                            confirmButtonText: 'OK',
                            width: '400px',  // Defina a largura desejada aqui
                            padding: '20px', // Ajuste o preenchimento interno do alerta
                            customClass: {
                                popup: 'custom-popup'  // Adiciona uma classe customizada (opcional)
                            }
                        }).then(function () {
                            // Fecha o modal
                            $('#AtualizarServico').modal('hide');
                            // Recarrega a página
                            location.reload(); // Recarrega a página atual
                        });
                    } else {
                        Swal.fire({
                            position: "top-end",
                            icon: 'error',
                            title: 'Erro',
                            text: resultado.message,
                            confirmButtonText: 'OK',
                            width: '400px',  // Defina a largura desejada aqui
                            padding: '20px', // Ajuste o preenchimento interno do alerta
                            customClass: {
                                popup: 'custom-popup'  // Adiciona uma classe customizada (opcional)
                            }
                        });
                    }
                },
                error: function (xhr, status, error) {
                    Swal.fire({
                        position: "top-end",
                        icon: 'error',
                        title: 'Erro',
                        text: resultado.message,
                        confirmButtonText: 'OK',
                        width: '400px',  // Defina a largura desejada aqui
                        padding: '20px', // Ajuste o preenchimento interno do alerta
                        customClass: {
                            popup: 'custom-popup'  // Adiciona uma classe customizada (opcional)
                        }
                    });
                }
            });
        }

    </script>
</body>